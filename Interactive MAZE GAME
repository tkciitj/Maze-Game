#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <string.h>

// Constants as MACROS
#define ROWS 16
#define COLM 16

// Functions for different operations
void generateMaze(char maze[ROWS][COLM],int k);
void displayMaze(char maze[ROWS][COLM]);
void CheatMode();

int main() {
    int option;
    printf(" __    __    _     __________      ____    _    __    __ _____ \n");
    printf("|  |  /  |  / |   |__  / ____|    / ___|  / |  |  |  /  | ____|\n");
    printf("| ||_/ | | / _ |    / /|  _|     | |  _  / _ | | ||_/ | |  _|  \n");
    printf("| |__/ | |/ ___ |  / /_| |___    | |_| |/ ___ || |__/ | | |___ \n");
    printf("|_|    |_/_/   |_|/____|_____|    |____/_/   |_|_|    |_|_____|\n");
printf("\n_________________________________________________________________\n");

    printf("1.Play\n");
    printf("2.Cheat Mode\n");
    printf("3.Quit\n");
    opt:
    printf("Select option(enter single digit only):- ");
    scanf("%d", &option);
    if(option<1 || option>3){
        printf("Not a valid option\n");
        goto opt;
    } else if(option==3){
        goto quit;
    } else if(option==2){
        CheatMode();
    } else if(option==1){
        goto startgame;
    } else {
        printf("Not a valid option\n");
        goto opt;
    }
    
    startgame:
    
    printf("INSTRUCTIONS:-\n");
    printf("*Press (x/X) to get out of a particular level during the game.\n");
    printf(" _     _______     _______ _           _ \n");
    printf("| |   | ____| |   / / ____| |         / |\n");
    printf("| |   |  _|  | | / /|  _| | |    _____| |\n");
    printf("| |___| |___  | V / | |___| |___|_____| |\n");
    printf("|_____|_____|  |_/  |_____|_____|     |_|\n");
    char maze[ROWS][COLM];
    int playerRow, playerColm;
    
    int count=0;
    st : 
    char prompt[5];
    char str1[5]="yes";
    char str2[5]="no";
    
    int steps=0;
    count++;
    generateMaze(maze,count);
    
    // Initialize player position
    playerRow = 0;
    playerColm = 0;
    maze[0][0] = '$'; // MAZE START
    maze[ROWS-1][COLM-1] = 'X';    //MAZE END 
    // Main game loop
    bool gameOver = false;
    while (!gameOver) {
        
        // Display the maze
        displayMaze(maze);
        printf("STEPS: %d\n", steps);
        // Check for win condition
        if (playerRow == ROWS - 1 && playerColm == COLM - 1) {
            printf("Congo!! You have reached the end of the maze!\n");
            printf("*THE END*\n");
            if(count==1 && steps==50) {
                printf("YOUR SCORE: 10/10");
            } else if(count==1 && 50<steps && steps<60) {
                printf("YOUR SCORE: 8/10");
            } else if(count==1 && steps>=60) {
                printf("YOUR SCORE: 6/10");
            } else if(count==2 && steps==52) {
                printf("YOUR SCORE: 10/10");
            } else if(count==2 && 52<steps && steps<60) {
                printf("YOUR SCORE: 8/10");
            } else if(count==2 && steps>=60) {
                printf("YOUR SCORE: 6/10");
            } else if(count==3 && steps==56) {
                printf("YOUR SCORE: 10/10");
            } else if(count==3 && 56<steps && steps<63) {
                printf("YOUR SCORE: 8/10");
            } else if(count==3 && steps>=63) {
                printf("YOUR SCORE: 6/10");
            }
            printf("\n");
            gameOver = true;
            break;
        }
        // Player chance/movement
        char move;
        printf("Enter your move (W(up)/A(left)/S(down)/D(right)): ");
        scanf(" %c", &move);
        // Update player position
        switch (move) {
            case 'W':
                if (playerRow > 0 && maze[playerRow - 1][playerColm] != '#') {
                    maze[playerRow-1][playerColm] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerRow--;
                    steps++;
                }
                break;
            case 'w':
            if (playerRow > 0 && maze[playerRow - 1][playerColm] != '#') {
                    maze[playerRow-1][playerColm] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerRow--;
                    steps++;
                }
                break;
            case 'A':
                if (playerColm > 0 && maze[playerRow][playerColm - 1] != '#') {
                    maze[playerRow][playerColm-1] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerColm--;
                    steps++;
                }
                break;
            case 'a':
            if (playerColm > 0 && maze[playerRow][playerColm - 1] != '#') {
                    maze[playerRow][playerColm-1] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerColm--;
                    steps++;
                }
                break;
            case 'S':
                if (playerRow < ROWS - 1 && maze[playerRow + 1][playerColm] != '#') {
                    maze[playerRow+1][playerColm] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerRow++;
                    steps++;
                }
                break;
            case 's':
            if (playerRow < ROWS - 1 && maze[playerRow + 1][playerColm] != '#') {
                    maze[playerRow+1][playerColm] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerRow++;
                    steps++;
                }
                break;
            case 'D':
                if (playerColm < COLM - 1 && maze[playerRow][playerColm + 1] != '#') {
                    maze[playerRow][playerColm+1] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerColm++;
                    steps++;
                }
                break;
            case 'd':
            if (playerColm < COLM - 1 && maze[playerRow][playerColm + 1] != '#') {
                    maze[playerRow][playerColm+1] = 'P';
                    maze[playerRow][playerColm] = '.';
                    playerColm++;
                    steps++;
                }
                break;
            case 'x':
                 goto st1;
            case 'X':
                 goto st1;
            default:
                printf("Invalid move! Use W/A/S/D.\n");
        }
    }
    st1:
    printf("Want to PLAY AGAIN?(yes/no): ");
        scanf("%s", prompt);
        if(strcmp(prompt,str1)==0 && count<3) {
    printf(" _     _______     _______ _            \n");
    printf("| |   | ____| |   / / ____| |         \n");
    printf("| |   |  _|  | | / /|  _| | |    _____ \n");
    printf("| |___| |___  | V / | |___| |___|_____| %d\n", count+1);
    printf("|_____|_____|  |_/  |_____|_____|     \n");
printf("\n_________________________________________________________________\n");
            goto st;
        } else if(strcmp(prompt,str2)==0 || count==3) {
            if(count==3){
                printf("THATS ALL FOR NOW!");
            }
            quit:
printf("\n_________________________________________________________________\n");
            printf("  ____  ___   ___  ____      ____    _ __   __\n");
            printf(" / ___|/ _ | / _ ||  _ |    |  _ |  / || | / /\n");
            printf("| |  _| | | | | | | | | |   | | | |/ _ || V / \n");
            printf("| |_| | |_| | |_| | |_| |   | |_| / ___ || | \n");
            printf(" |____||___/ |___/|____/    |____/_/   |_|_|  \n");
        }
    return 0;
}
void generateMaze(char maze[ROWS][COLM],int n) {
    char layout1[ROWS][COLM]= {
{'.','.','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
{'#','.','.','.','.','.','.','.','#','#','#','.','#','#','#','#'},
{'#','.','#','#','#','#','#','.','#','#','#','.','#','#','#','#'},
{'.','.','.','.','.','.','#','.','#','#','#','.','#','#','#','#'},
{'.','#','#','#','#','#','#','.','.','.','.','.','.','.','.','#'},
{'.','.','.','#','#','#','#','#','#','#','#','#','#','#','.','#'},
{'#','#','.','#','#','#','#','.','#','#','#','#','#','#','.','#'},
{'#','#','.','.','.','.','.','.','.','.','#','#','#','#','.','.'},
{'.','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#'},
{'#','#','#','#','#','#','#','#','#','.','#','#','#','#','#','#'},
{'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
{'.','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
{'.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','#'},
{'#','.','#','#','#','#','#','#','.','#','#','#','#','#','#','#'},
{'.','.','.','.','.','.','#','.','.','.','.','.','.','.','#','#'},
{'#','#','#','#','#','#','#','#','#','#','#','#','#','.','.','X'}
    };
    char layout2[ROWS][COLM]= {
{'.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
{'.', '#', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#'},
{'.', '.', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.'},
{'#', '.', '#', '.', '.', '.', '.', '#', '.', '.', '#', '#', '#', '#', '.', '.'},
{'#', '#', '#', '.', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '.'},
{'#', '.', '.', '.', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.'},
{'#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '.', '.'},
{'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#'},
{'.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '#'},
{'#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.'},
{'.', '.', '.', '.', '.', '.', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.'},
{'.', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '#', '.'},
{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.'},
{'.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.'},
{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'X'}
    };
    char layout3[ROWS][COLM]= {
{'.', '.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
{'#', '#', '#', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#'},
{'.', '.', '.', '.', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.'},
{'#', '.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '#', '#', '.', '.'},
{'#', '.', '#', '.', '#', '#', '.', '.', '#', '#', '#', '.', '#', '#', '.', '.'},
{'#', '.', '#', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.', '.'},
{'#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '.', '#', '#', '.', '.', '.'},
{'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.'},
{'.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.', '#'},
{'#', '#', '.', '#', '#', '#', '.', '.', '#', '#', '#', '#', '#', '.', '.', '#'},
{'.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.', '#', '#'},
{'#', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '.', '#', '.', '#', '.'},
{'.', '#', '.', '.', '.', '.', '.', '.', '.', '#', '.', '.', '.', '.', '#', '.'},
{'.', '#', '#', '#', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.'},
{'.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.'},
{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'X'}
    };
    if(n==1) {
    for(int i=0; i<ROWS; i++) {
        for(int j=0; j<COLM; j++) {
           maze[i][j]= layout1[i][j];
        }
    }
    } else if(n==2) {
        for(int i=0; i<ROWS; i++) {
           for(int j=0; j<COLM; j++) {
           maze[i][j]= layout2[i][j];
           }
        }
    } else if(n==3) {
        for(int i=0; i<ROWS; i++) {
           for(int j=0; j<COLM; j++) {
           maze[i][j]= layout3[i][j];
           }
        }
    }
    return;
}
void displayMaze(char maze[ROWS][COLM]) {
    for(int i=0; i<ROWS; i++) {
        for(int j=0; j<COLM; j++) {
           printf("%c ", maze[i][j]);
        }
        printf("\n");
    }
    return;
}
void CheatMode(){
    char Bestroute[ROWS][COLM];
    int option;
    cm:
    printf("1.Best Route for LEVEL-1\n");
    printf("2.Best Route for LEVEL-2\n");
    printf("3.Best Route for LEVEL-3\n");
    reselect:
    printf("Select option(enter single digit only):- ");
    scanf("%d", &option);
    if(option==1){
        char Bestroute1[ROWS][COLM]= {
{'$','o','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
{'#','o','.','.','.','.','.','.','#','#','#','.','#','#','#','#'},
{'#','o','#','#','#','#','#','.','#','#','#','.','#','#','#','#'},
{'o','o','.','.','.','.','#','.','#','#','#','.','#','#','#','#'},
{'o','#','#','#','#','#','#','.','.','.','.','.','.','.','.','#'},
{'o','o','o','#','#','#','#','#','#','#','#','#','#','#','.','#'},
{'#','#','o','#','#','#','#','.','#','#','#','#','#','#','.','#'},
{'#','#','o','o','o','o','o','o','o','o','#','#','#','#','.','.'},
{'.','#','#','#','#','#','#','#','#','o','#','#','#','#','#','#'},
{'#','#','#','#','#','#','#','#','#','o','#','#','#','#','#','#'},
{'o','o','o','o','o','o','o','o','o','o','.','.','.','.','.','#'},
{'o','#','#','#','#','#','#','#','#','#','#','#','#','#','#','#'},
{'o','o','o','o','o','o','o','o','o','.','.','.','.','.','.','#'},
{'#','.','#','#','#','#','#','#','o','#','#','#','#','#','#','#'},
{'.','.','.','.','.','.','#','.','o','o','o','o','o','o','#','#'},
{'#','#','#','#','#','#','#','#','#','#','#','#','#','o','o','X'}
};
    for(int i=0; i<ROWS; i++){
        for(int j=0; j<COLM; j++){
            Bestroute[i][j]=Bestroute1[i][j];
        }
    }
    } else if(option==2){
        char Bestroute2[ROWS][COLM]= {
{'$', 'o', 'o', 'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
{'.', '#', '#', 'o', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#'},
{'.', '.', '#', 'o', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '.'},
{'#', '.', '#', 'o', '.', '.', '.', '#', '.', '.', '#', '#', '#', '#', '.', '.'},
{'#', '#', '#', 'o', '#', '#', '#', '#', '.', '#', '#', '#', '#', '#', '.', '.'},
{'#', 'o', 'o', 'o', '.', '.', '.', '.', '.', '#', '#', '.', '.', '.', '.', '.'},
{'#', 'o', '#', '#', '#', '#', '#', '#', '#', '.', '#', '#', '#', '.', '.', '.'},
{'#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', '#', '#', '.', '.', '.'},
{'.', '#', '#', '#', '#', '#', '#', '#', '#', 'o', '#', '#', '#', '.', '#', '#'},
{'#', '#', '#', '#', '#', '#', '#', '#', '#', 'o', '#', '#', '#', '.', '#', '.'},
{'.', '.', '.', '.', '.', '.', '#', '#', '#', 'o', '#', '#', '#', '.', '#', '.'},
{'.', '#', '#', '#', '#', '#', '#', '#', '#', 'o', '#', '#', '#', '.', '#', '.'},
{'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '.', '.', '.', '.', '#', '.'},
{'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.'},
{'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o'},
{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'X'}
};
    for(int i=0; i<ROWS; i++){
        for(int j=0; j<COLM; j++){
            Bestroute[i][j]=Bestroute2[i][j];
        }
    }
    } else if(option==3){
        char Bestroute3[ROWS][COLM]= {
{'$', 'o', 'o', 'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#'},
{'#', '#', '#', 'o', '#', '.', '.', '.', '#', '.', '.', '.', '.', '.', '.', '#'},
{'.', '.', '.', 'o', '#', '.', '.', '.', '#', 'o', 'o', 'o', 'o', 'o', 'o', '.'},
{'#', '.', '#', 'o', 'o', 'o', 'o', 'o', 'o', 'o', '#', 'o', '#', '#', 'o', '.'},
{'#', '.', '#', '.', '#', '#', '.', '.', '#', '#', '#', 'o', '#', '#', 'o', '.'},
{'#', '.', '#', '.', '.', '.', '.', '.', '#', '#', '.', 'o', 'o', 'o', 'o', '.'},
{'#', '.', '#', '#', '#', '#', '#', '#', '#', '.', '.', '#', '#', '.', 'o', '.'},
{'#', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '#', '.', 'o', '.'},
{'.', '.', '.', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'o', '#'},
{'#', '#', '.', '#', '#', '#', '.', '.', '#', '#', '#', '#', '#', 'o', 'o', '#'},
{'.', '.', '.', '.', '.', '.', '.', '#', 'o', 'o', 'o', 'o', '#', 'o', '#', '#'},
{'#', '#', '#', '#', '#', '#', '#', '#', 'o', '#', '#', 'o', '#', 'o', '#', '.'},
{'.', '#', '.', '.', 'o', 'o', 'o', 'o', 'o', '#', '.', 'o', 'o', 'o', '#', '.'},
{'.', '#', '#', '#', 'o', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '.'},
{'.', '.', '.', '.', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o', 'o'},
{'#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', '#', 'X'}
};
    for(int i=0; i<ROWS; i++){
        for(int j=0; j<COLM; j++){
            Bestroute[i][j]=Bestroute3[i][j];
        }
    }
    } else {
        printf("Not a valid option\n");
        goto reselect;
    }
    for(int i=0; i<ROWS; i++) {
        for(int j=0; j<COLM; j++) {
           printf("%c ", Bestroute[i][j]);
        }
        printf("\n");
    }
printf("\n_________________________________________________________________\n");
    int t;
    printf("1.Back to Cheat Mode\n");
    printf("2.Start playing\n");
    re:
    printf("Select option(enter single digit only):- ");
    scanf("%d", &t);
printf("\n_________________________________________________________________\n");
    if(t==1){
        goto cm;
    } else if(t==2){
        return;
    } else {
        printf("Not a valid option\n");
        goto re;
    }
}
